{"version":3,"sources":["components/AppHeader.js","components/MetadataType.js","components/ComponentList.js","context/reducer.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","button","title","AppHeader","classes","dispatch","useContext","GlobalContext","className","AppBar","position","Toolbar","Typography","variant","Button","color","onClick","type","startIcon","console","log","minWidth","fontSize","pos","marginBottom","MetadataType","globalState","useState","filterKey","setFilterKey","handleMetadataClick","evt","metadataType","stopPropagation","payload","window","scrollTo","Card","CardHeader","titleTypographyProps","action","Fragment","parNodeArr","skippedMetadataTypes","metadataTypes","map","inFolder","isChildXMLName","push","id","isSelected","isIndeterminate","length","sort","CardContent","TextField","placeholder","value","onChange","event","fKey","target","size","InputProps","startAdornment","InputAdornment","fullWidth","List","dense","component","aria-label","toUpperCase","includes","ListItem","key","selected","selectedMetadataType","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","inputProps","checked","indeterminate","isChecked","handleCheckboxChange","ListItemText","primary","ListItemSecondaryAction","IconButton","ComponentList","isShowChildren","updateMetadataType","selectedChildrenArr","children","filter","child","text","FormGroup","FormControlLabel","control","compId","handleComponentClick","label","reducer","state","processInitialRequest","processInitialResponse","processMetadataTypeCheckBox","processMetadataTypeClick","processFetchChildrenResponse","processComponentCheckBox","processMetadataSelectAll","processMetadataClearAll","processUpdatePackageXml","processCopyToClipboard","processHowTo","vscode","postMessage","command","metadataObjects","mpExistingPackageXML","processChildXMLNames","obj1","obj2","xmlName","forEach","metadataObj","parNode","members","childArr","isWildChar","c","childName","isRefreshedFromServer","isParent","combinedArr","i","childXmlNames","childXmlName","childObj","updatedChildren","newMetadataTypes","mTypeItr","message","results","metadataTypeId","childrenArr","Array","isArray","node","fullName","isParMetadataSelected","oldChildArr","selChildCount","oldChild","find","item","selectedMetadata","url","createContext","App","useReducer","prefersDarkMode","document","querySelector","classList","contains","preferredTheme","createMuiTheme","palette","useEffect","messageEventListener","data","addEventListener","removeEventListener","ThemeProvider","Provider","Grid","container","xs","Paper","Boolean","location","hostname","match","acquireVsCodeApi","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"iVAYMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,OAAQ,CACNF,YAAaJ,EAAMK,QAAQ,IAE7BE,MAAO,CACLL,SAAU,OAIC,SAASM,IACtB,IAAMC,EAAUX,IACRY,EAAYC,qBAAWC,IAAvBF,SAeR,OACE,yBAAKG,UAAWJ,EAAQR,MACtB,kBAACa,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWJ,EAAQF,OAA5C,oCAGA,kBAACY,EAAA,EAAD,CAAQC,MAAM,UACZC,QArBa,WACrBX,EAAS,CAACY,KAAM,wBAqBRJ,QAAQ,WACRL,UAAWJ,EAAQH,OACnBiB,UAAW,kBAAC,IAAD,OAJb,sBAOA,kBAACJ,EAAA,EAAD,CAAQC,MAAM,UACZC,QAxBY,WACpBX,EAAS,CAACY,KAAM,uBAwBRJ,QAAQ,WACRL,UAAWJ,EAAQH,OACnBiB,UAAW,kBAAC,IAAD,OAJb,qBAOA,kBAACJ,EAAA,EAAD,CAAQC,MAAM,UACZC,QA3BU,WAClBG,QAAQC,IAAI,uBACZf,EAAS,CAACY,KAAM,YA0BRJ,QAAQ,WACRL,UAAWJ,EAAQH,OACnBiB,UAAW,kBAAC,IAAD,OAJb,a,kJC9CJzB,EAAYC,YAAW,CAC3BE,KAAM,CACJyB,SAAU,KAEZnB,MAAO,CACLoB,SAAU,IAEZC,IAAK,CACHC,aAAc,MAIH,SAASC,IACtB,IAAMrB,EAAUX,IADqB,EAEJa,qBAAWC,IAApCmB,EAF6B,EAE7BA,YAAarB,EAFgB,EAEhBA,SAFgB,EAGJsB,mBAAS,IAHL,mBAG9BC,EAH8B,KAGpBC,EAHoB,KAiBhCC,EAAsB,SAACC,EAAIC,GAC9BD,EAAIE,kBACJd,QAAQC,IAAI,+CACZD,QAAQC,IAAIY,GACZ3B,EAAS,CAACY,KAAM,mBAAqBiB,QAAUF,IAC/CG,OAAOC,SAAS,EAAG,IA4CrB,OACE,kBAACC,EAAA,EAAD,CAAM7B,UAAWJ,EAAQR,KAAMiB,QAAQ,YACzC,kBAACyB,EAAA,EAAD,CACIC,qBAAsB,CAAC1B,QAAQ,MAClCX,MAAM,iBACHsC,OACE,kBAAC,IAAMC,SAAP,KACA,kBAAC3B,EAAA,EAAD,CAAQC,MAAM,YAAYC,QAhDT,WACrBG,QAAQC,IAAI,mCACZ,IAAIsB,EAAW,GACXC,EAAqB,GAEnBC,EAAclB,EAAYkB,cAAcC,KAAI,SAAAb,GAUhD,OAREA,EAAac,UAAad,EAAae,eAKzCJ,EAAqBK,KAAKhB,EAAaiB,KAJvCP,EAAWM,KAAKhB,EAAaiB,IAC7BjB,EAAakB,YAAW,EACxBlB,EAAamB,iBAAgB,GAKtBnB,KAGNW,GAAwBA,EAAqBS,OAAO,IACrDjC,QAAQC,IAAI,wBACZD,QAAQC,IAAIuB,GACZA,EAAqBU,QAIvBX,EAAWW,OAEXhD,EAAS,CAACY,KAAM,wBAA0BiB,QAAU,CAACU,gBAAcF,aAAWC,4BAqBtB,+CACpD,kBAAC7B,EAAA,EAAD,CAAQE,QAnBO,WACnBG,QAAQC,IAAI,kCACZf,EAAS,CAACY,KAAM,2BAiBZ,gBAKF,kBAACqC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACAN,GAAG,4BACHpC,QAAQ,WACR2C,YAAY,0BACZC,MAAO7B,EACP8B,SAzBsB,SAACC,GAC3B,IAAIC,EAAKD,EAAME,OAAOJ,MAEtB5B,EADA+B,EAAKA,GAAU,KAwBXE,KAAK,QACLC,WAAY,CACZC,eACE,kBAACC,EAAA,EAAD,CAAgBvD,SAAS,SACzB,kBAAC,IAAD,QAIFwD,WAAS,IAET,kBAACC,EAAA,EAAD,CAAMC,OAAK,EAACC,UAAU,MAAMC,aAAW,kBACtC5C,EAAYkB,cAAcC,KAAI,SAAAb,GAE7B,OAAGA,EAAaiB,GAAGsB,cAAcC,SAAS5C,EAAU2C,eAEhD,kBAACE,EAAA,EAAD,CAAUxE,QAAM,EAACyE,IAAK1C,EAAaiB,GAAIjC,QAAS,SAAAe,GAAG,OAAED,EAAoBC,EAAIC,IAC7E2C,SAAU3C,EAAaiB,KAAKvB,EAAYkD,qBAAqB3B,GAC7D/C,MAAM,+CACN,kBAAC2E,EAAA,EAAD,KACM,kBAACC,EAAA,EAAD,CACEC,KAAK,QACLC,UAAW,EACXC,eAAa,EACbC,WAAY,CAAE,kBAAmB,WACjCC,QAASnD,EAAakB,WACtBkC,cAAepD,EAAamB,gBAC5BnC,QAAS,SAAAe,GAAG,OA3GH,SAACA,EAAIC,GAChCD,EAAIE,kBACJd,QAAQC,IAAI,gDACZ,IAAMiE,EAAUtD,EAAI8B,OAAOsB,QAC3BnD,EAAakB,WAAWmC,EACxBrD,EAAamB,iBAAgB,EAC7BhC,QAAQC,IAAIY,GACZ3B,EAAS,CAACY,KAAM,mCAAqCiB,QAAUF,IAC/DG,OAAOC,SAAS,EAAG,GAmGakD,CAAqBvD,EAAIC,OAI/C,kBAACuD,EAAA,EAAD,CAAcC,QAASxD,EAAaiB,KACpC,kBAACwC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYX,KAAK,MAAMT,aAAW,WAChCtD,QAAS,SAAAe,GAAG,OAAED,EAAoBC,EAAIC,KACtC,kBAAC,IAAD,SAMD,2C,sBC/IbvC,EAAYC,YAAW,CAC3BE,KAAM,CACJyB,SAAU,KAEZnB,MAAO,CACLoB,SAAU,IAEZC,IAAK,CACHC,aAAc,MAIH,SAASmE,EAAT,GAA+D,IAAvCf,EAAsC,EAAtCA,qBAC/BxE,GADqE,EAAjBwF,eAC1CnG,KACRY,EAAYC,qBAAWC,IAAvBF,SAFmE,EAG1CsB,mBAAS,IAHiC,mBAGpEC,EAHoE,KAG1DC,EAH0D,KAqBrEgE,EAAqB,SAACjB,GAC1BzD,QAAQC,IAAI,+CAEZ,IAAM0E,EAAoBlB,EAAqBmB,SAASC,QAAO,SAAAC,GAAK,OAAEA,EAAM/C,cAe5E,OAdgC,IAA7B4C,EAAoB1C,QAErBwB,EAAqB1B,YAAW,EAChC0B,EAAqBzB,iBAAgB,GAC9B2C,EAAoB1C,SAASwB,EAAqBmB,SAAS3C,QAElEwB,EAAqB1B,YAAW,EAChC0B,EAAqBzB,iBAAgB,IAGrCyB,EAAqB1B,YAAW,EAChC0B,EAAqBzB,iBAAgB,GAGhCyB,GAkCT,OACE,kBAACvC,EAAA,EAAD,CAAM7B,UAAWJ,EAAQR,KAAMiB,QAAQ,YACzC,kBAACyB,EAAA,EAAD,CACIC,qBAAsB,CAAC1B,QAAQ,MAClCX,MAAmC,KAA5B0E,EAAqBsB,KAAUtB,EAAqBsB,KAAK,uBAC7D1D,OACE,kBAAC,IAAMC,SAAP,KACA,kBAAC3B,EAAA,EAAD,CAAQE,QArCU,WACtB4D,EAAqBmB,SAASnB,EAAqBmB,SAASlD,KAAI,SAAAoD,GAE9D,OADAA,EAAM/C,YAAW,EACV+C,KAITrB,EAAqB1B,YAAW,EAChC0B,EAAqBzB,iBAAgB,EACrC9C,EAAS,CAACY,KAAM,kCAAoCiB,QAAU0C,MA4B1D,cACA,kBAAC9D,EAAA,EAAD,CAAQE,QA1BS,WACrB4D,EAAqBmB,SAASnB,EAAqBmB,SAASlD,KAAI,SAAAoD,GAE9D,OADAA,EAAM/C,YAAW,EACV+C,KAITrB,EAAqB1B,YAAW,EAChC0B,EAAqBzB,iBAAgB,EACrC9C,EAAS,CAACY,KAAM,kCAAoCiB,QAAU0C,MAiB1D,gBAKF,kBAACtB,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CACAN,GAAG,4BACHpC,QAAQ,WACR2C,YAAyC,KAA5BoB,EAAqBsB,KAAU,UAAUtB,EAAqBsB,KAAK,KAAK,sBACrFzC,MAAO7B,EACP8B,SAzBwB,SAACC,GAC3B,IAAIC,EAAKD,EAAME,OAAOJ,MAEtB5B,EADA+B,EAAKA,GAAU,KAwBbE,KAAK,QACLC,WAAY,CACZC,eACE,kBAACC,EAAA,EAAD,CAAgBvD,SAAS,SACzB,kBAAC,IAAD,QAIFwD,WAAS,IAGT,kBAACiC,EAAA,EAAD,KAEMvB,EAAqBmB,SAASlD,KAAI,SAAAoD,GAEhC,OAAGA,EAAMC,KAAK3B,cAAcC,SAAS5C,EAAU2C,eAG3C,kBAAC6B,EAAA,EAAD,CACEC,QAAS,kBAACvB,EAAA,EAAD,CAAUrB,MAAOwC,EAAMhD,GAAIkC,QAASc,EAAM/C,WACnDlC,QAAS,SAAAe,GAAG,OA5GD,SAACsC,EAAUtC,GACtCZ,QAAQC,IAAI,iDACZ,IAAMiE,EAAUtD,EAAI8B,OAAOsB,QACrBmB,EAAOjC,EAAUpB,GACvB2B,EAAqBmB,SAASnB,EAAqBmB,SAASlD,KAAI,SAAAoD,GAI9D,OAHGK,IAASL,EAAMhD,KAChBgD,EAAM/C,WAAWmC,GAEZY,KAGTrB,EAAqBiB,EAAmBjB,GACxCvE,EAAS,CAACY,KAAM,kCAAoCiB,QAAU0C,IAgGhC2B,CAAqBN,EAAMlE,MACzCyE,MAAOP,EAAMC,OAIV,2C,8CChJVO,EAAU,SAACC,EAAOlE,GAC9B,OAAQA,EAAOvB,MACZ,IAAK,oBACN,OAAO0F,EAAsBD,GAE9B,IAAK,qBACJ,OAAOE,EAAuBF,EAAOlE,GAEhC,IAAK,mCACD,OAAOqE,EAA4BH,EAAMlE,GAE7C,IAAK,mBACD,OAAOsE,EAAyBJ,EAAMlE,GAE1C,IAAK,0BACD,OAAOuE,GAA6BL,EAAMlE,GAE9C,IAAK,kCACD,OAAOwE,GAAyBN,EAAMlE,GAE1C,IAAK,wBACD,OAAOyE,GAAyBP,EAAMlE,GAE1C,IAAK,uBACD,OAAO0E,GAAwBR,EAAMlE,GAEzC,IAAK,qBACD,OAAO2E,GAAwBT,EAAMlE,GAEzC,IAAK,oBACD,OAAO4E,GAAuBV,EAAMlE,GAExC,IAAK,SACD,OAAO6E,GAAaX,EAAMlE,GAEpC,QACC,OAAOkE,IAIHC,EAAuB,SAACD,GAI9B,OAHAA,EAAMY,OAAOC,YAAY,CAClBC,QAAS,sBAETd,GAGDE,EAAyB,SAACF,EAAOlE,GACpCrB,QAAQC,IAAI,kCACZ,IAAIwB,EAAc,GACfV,EAAQM,EAAON,QACjBuF,EAAgBvF,EAAQuF,gBACtBC,EAAqBxF,EAAQwF,qBAqEhC,OApEAD,EAAgBE,EAAqBF,IAErBpE,MAAK,SAACuE,EAAKC,GACvB,OAAID,EAAKE,QAAUD,EAAKC,QAAgB,EACpCF,EAAKE,UAAYD,EAAKC,QAAgB,EACtCF,EAAKE,QAAUD,EAAKC,SAAiB,OAAzC,KAIJL,EAAgBM,SAAQ,SAAAC,GACpB,IAAIF,EAAQE,EAAYF,QACpB/E,IAAgBiF,EAAYjF,gBAAgBiF,EAAYjF,eAE5D,GAAG2E,EAAqBI,GAAS,CAM7B,IAJA,IAGIG,EAHAC,EAAQR,EAAqBI,GAC7BK,EAAS,GACTC,GAAW,EAEPC,EAAE,EAAEA,EAAEH,EAAQ9E,OAAOiF,IAAI,CAC7B,IAAIC,EAAUJ,EAAQG,GAEtB,GAAe,MAAZC,EAAH,CAMA,IAAIrC,EAAM,CACN,GAAO6B,EAAQ,IAAIQ,EACnB,KAASA,EACTpF,YAAc,GAGlBiF,EAASnF,KAAKiD,QAXVmC,GAAW,EAcfH,EAAQ,CACJ,GAAOH,EACP,KAASA,EACT/B,SAAWoC,EACXrF,SAAWkF,EAAYlF,SACvBC,eAAeA,EACfwF,uBAAwB,EACxBC,UAAY,EACZtF,WAAckF,EACdjF,iBAAmBiF,GAGvBxF,EAAcI,KAAKiF,QAGtBrF,EAAcI,KAAK,CAChB,GAAO8E,EACP,KAASA,EACTS,uBAAwB,EACxBxF,eAAeA,EACfgD,SAAW,GACXjD,SAAWkF,EAAYlF,SACvB0F,UAAY,EACZtF,YAAc,EACdC,iBAAkB,OAM9BhC,QAAQC,IAAIwB,GACL,eAAI8D,EAAX,CAAkB9D,mBAIf+E,EAAsB,SAACF,GAE1B,IADA,IAAIgB,EAAY,GACRC,EAAE,EAAEA,EAAEjB,EAAgBrE,OAAOsF,IACjCD,EAAYzF,KAAKyE,EAAgBiB,IAE9BjB,EAAgBiB,GAAGC,eAClBlB,EAAgBiB,GAAGC,cAAcZ,SAAQ,SAAAa,GACrC,IAAIC,EAAS,GACbA,EAASf,QAAQc,EACjBC,EAAS/F,UAAS,EAClB+F,EAAS9F,gBAAe,EACxB0F,EAAYzF,KAAK6F,MAM7B,OAAOJ,GAGL5B,EAA6B,SAACH,EAAMlE,GACtCrB,QAAQC,IAAI,uCACZ,IAAMY,EAAaQ,EAAON,QAC1Bf,QAAQC,IAAIY,GACZ,IAAMsF,EAAOZ,EAAMY,OACnBZ,EAAMb,GAAmBa,EAAM1E,GAC/B,IAAM4C,EAAqB5C,EAEvB8G,EAAgB9G,EAAa+D,SAASlD,KAAI,SAAAoD,GAE1C,OADAA,EAAM/C,WAAWlB,EAAakB,WACvB+C,KAaX,OAXAjE,EAAa+D,SAAS+C,EAElB9G,EAAauG,uBACbjB,EAAOC,YAAY,CACfC,QAAS,yBACTxF,aAAeA,IAIvB0E,EAAM9B,qBAAqBA,EAEpB,eAAI8B,IAGTI,EAA0B,SAACJ,EAAMlE,GACnCrB,QAAQC,IAAI,oCACZ,IAAMY,EAAaQ,EAAON,QAC1Bf,QAAQC,IAAIY,GACZ,IAAMsF,EAAOZ,EAAMY,OACnBZ,EAAMb,GAAmBa,EAAM1E,GAC/B,IAAM4C,EAAqB5C,EAW3B,OATIA,EAAauG,uBACbjB,EAAOC,YAAY,CACfC,QAAS,yBACTxF,aAAeA,IAIvB0E,EAAM9B,qBAAqBA,EAEpB,eAAI8B,IAGTb,GAAqB,SAACa,EAAM1E,GAC9B,IACM+G,EADcrC,EAAM9D,cACWC,KAAI,SAAAmG,GACrC,OAAGhH,EAAaiB,KAAK+F,EAAS/F,GACnBjB,EAGJgH,KAGX,OADAtC,EAAM9D,cAAcmG,EACbrC,GAGLK,GAA6B,SAACL,EAAMlE,GACtCrB,QAAQC,IAAI,wCACZ,IAAI6H,EAAQzG,EAAON,QACfgH,EAAQD,EAAQC,QAChBC,EAAeF,EAAQjH,aAEvBoH,EAAY,GAGhB,GAAIF,GAA4B,IAAjBA,EAAQ9F,OAIjB,GAAKiG,MAAMC,QAAQJ,GAKrB,IAAI,IAAIR,EAAE,EAAEA,EAAEQ,EAAQ9F,OAAOsF,IAAI,CAC7B,IAAIa,EAAKL,EAAQR,GACjBvH,QAAQC,IAAI,8BAA8BmI,EAAKC,UAC/CJ,EAAYpG,KAAK,CAAE,GAAOmG,EAAe,IAAII,EAAKC,SAAU,KAASD,EAAKC,gBAP9ErI,QAAQC,IAAI,iCAAiC8H,EAAQM,UACrDJ,EAAYpG,KAAK,CAAE,GAAOmG,EAAe,IAAID,EAAQM,SAAU,KAASN,EAAQM,gBALhFrI,QAAQC,IAAI,eACZgI,EAAY,GAgBhBA,EAAY/F,MAAK,SAACuE,EAAKC,GACnB,OAAID,EAAK1B,KAAO2B,EAAK3B,KAAa,EAC9B0B,EAAK1B,OAAS2B,EAAK3B,KAAa,EAChC0B,EAAK1B,KAAO2B,EAAK3B,MAAc,OAAnC,KAGJ,IAAM6C,EAAiBrC,EAAM9D,cAAcC,KAAI,SAAAmG,GAC3C,GAAGG,IAAiBH,EAAS/F,GAAG,CAC5B,IAAIwG,EAAsBT,EAAS9F,WACnC8F,EAAST,uBAAsB,EAC/B,IAAImB,EAAcV,EAASjD,SACvB4D,EAAc,EAClBX,EAASjD,SAASqD,EAAYvG,KAAI,SAAAoD,GAE9B,GAAGwD,EAECxD,EAAM/C,YAAW,MAChB,CAED,IAAI0G,EAAWF,EAAYG,MAAK,SAAAC,GAC5B,OAAOA,EAAK7G,KAAKgD,EAAMhD,MAGxB2G,GAEC3D,EAAM/C,WAAY0G,EAAS1G,WACxB+C,EAAM/C,YACLyG,KAIJ1D,EAAM/C,YAAW,EAIzB,OAAO+C,KAIa,IAArBmD,EAAYhG,QAAcuG,IAAgBP,EAAYhG,SACrD4F,EAAS9F,YAAW,EACpB8F,EAAS7F,iBAAgB,GAG7BuD,EAAM9B,qBAAqBoE,EAG/B,OAAOA,KAKX,OAFAtC,EAAM9D,cAAcmG,EACpB5H,QAAQC,IAAI2H,GACL,eAAIrC,IAITM,GAAyB,SAACN,EAAMlE,GAClCrB,QAAQC,IAAI,oCACZ,IAAMwD,EAAqBpC,EAAON,QAGlC,OAFAf,QAAQC,IAAIwD,GACZ8B,EAAM9B,qBAAqBA,EACpB,eAAI8B,IAGTO,GAAyB,SAACP,EAAMlE,GAClCrB,QAAQC,IAAI,oCACZ,IAAMc,EAAQM,EAAON,QACfoF,EAAOZ,EAAMY,OAQnB,OAPAZ,EAAM9D,cAAcV,EAAQU,cAC5B0E,EAAOC,YAAY,CACfC,QAAS,YACTuC,iBAAmB7H,EAAQQ,WAC3BC,qBAAuBT,EAAQS,uBAEnCxB,QAAQC,IAAIsF,EAAM9D,eACX,eAAI8D,IAITQ,GAAwB,SAACR,EAAMlE,GAejC,OAdArB,QAAQC,IAAI,mCAEZsF,EAAM9B,qBAAqB,CAAC3B,GAAG,GAAG8C,SAAS,IAG3CW,EAAM9D,cAAc8D,EAAM9D,cAAcC,KAAI,SAAAb,GAKxC,OAJAA,EAAauG,uBAAuB,EACpCvG,EAAa+D,SAAW,GACxB/D,EAAakB,YAAa,EAC1BlB,EAAamB,iBAAgB,EACtBnB,KAGXb,QAAQC,IAAIsF,EAAM9D,eACX,eAAI8D,IAGTS,GAAwB,SAACT,EAAMlE,GAOjC,OANakE,EAAMY,OACZC,YAAY,CACfC,QAAS,qBACT5E,cAAgB8D,EAAM9D,gBAGnB8D,GAGLU,GAAuB,SAACV,EAAMlE,GAOhC,OANakE,EAAMY,OACZC,YAAY,CACfC,QAAS,oBACT5E,cAAgB8D,EAAM9D,gBAGnB8D,GAGLW,GAAa,SAACX,EAAMlE,GAOtB,OANakE,EAAMY,OACZC,YAAY,CACfC,QAAS,WACTwC,IAAM,0BAGHtD,GCvVLjH,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,OAIDU,GAAgB0J,0BAgFdC,OA7Ef,WACE,IAAM9J,EAAUX,KADH,EAEmB0K,qBAAW1D,EAAS,CAAC,OAAWa,GAAQ1E,cAAgB,GAAIgC,qBAAuB,CAAC3B,GAAG,GAAGiD,KAAK,GAAGH,SAAS,IAAKH,gBAAiB,IAFpJ,mBAENlE,EAFM,KAEOrB,EAFP,KAGbc,QAAQC,IAAIkG,IAEZ,IAEM8C,EAFUC,SAASC,cAAc,QAEPC,UAAUC,SAAS,eAG7CC,EAAiBC,YAAe,CACpCC,QAAS,CAEP1J,KAAMmJ,EAAkB,OAAS,WAuCrC,OAnCAQ,qBAAU,WACRzJ,QAAQC,IAAI,+CACZf,EAAS,CAAEY,KAAM,wBACjB,CAACS,EAAY4F,SAGjBsD,qBAAU,WACRzJ,QAAQC,IAAI,kDACV,IAAMyJ,EAAsB,SAAClH,GAC3B,IAAMsF,EAAUtF,EAAMmH,KAEtB,OADA3J,QAAQC,IAAIuC,EAAMmH,MACV7B,EAAQzB,SACZ,IAAK,kBACD,IAAIC,EAAgBwB,EAAQxB,gBAC5BtG,QAAQC,IAAI,gDAAgDqG,EAAgBrE,QAC5E/C,EAAS,CAAEY,KAAM,qBAAuBiB,QAAU+G,IAClD,MAEJ,IAAK,eACH9H,QAAQC,IAAI,6CACZf,EAAS,CAAEY,KAAM,0BAA4BiB,QAAU+G,MAU/D,OADA9G,OAAO4I,iBAAiB,UAAWF,GAC5B,WACL1I,OAAO6I,oBAAoB,UAAWH,MAE1C,CAACnJ,EAAY4F,SAGX,kBAAC2D,EAAA,EAAD,CAAetL,MAAO8K,GACtB,kBAAClK,GAAc2K,SAAf,CAAwBzH,MAAO,CAAE/B,cAAarB,aAC5C,yBAAKG,UAAWJ,EAAQR,MACtB,kBAACuL,EAAA,EAAD,CAAMC,WAAS,EAACpL,QAAS,GACvB,kBAACmL,EAAA,EAAD,CAAMrB,MAAI,EAACuB,GAAI,IACb,kBAACC,EAAA,EAAD,KAAO,kBAACnL,EAAD,QAET,kBAACgL,EAAA,EAAD,CAAMrB,MAAI,EAACuB,GAAI,GACb,kBAACC,EAAA,EAAD,KAAO,kBAAC7J,EAAD,QAET,kBAAC0J,EAAA,EAAD,CAAMrB,MAAI,EAACuB,GAAI,GACb,kBAACC,EAAA,EAAD,KACwC,KAAtC5J,EAAYkD,qBAAqB3B,IACjC,kBAAC0C,EAAD,CAAef,qBAAsBlD,EAAYkD,qBAAsBgB,eAAgBlE,EAAYkE,wBC3E7F2F,QACW,cAA7BpJ,OAAOqJ,SAASC,UAEe,UAA7BtJ,OAAOqJ,SAASC,UAEhBtJ,OAAOqJ,SAASC,SAASC,MACvB,2DClBN,wCAKO,IAAMpE,GAASnF,OAAOwJ,mBAC7BC,IAASC,OAAO,kBAAC,GAAD,MAASxB,SAASyB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnL,QAAQmL,MAAMA,EAAMrD,c","file":"static/js/main.ba6410e6.chunk.js","sourcesContent":["import React,{useContext} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { GlobalContext } from \"../App\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function AppHeader() {\r\n  const classes = useStyles();\r\n  const { dispatch }= useContext(GlobalContext);\r\n\r\n  const updatePackageXML=()=>{\r\n    dispatch({type: \"UPDATE_PACKAGE_XML\"});\r\n  };\r\n\r\n  const copyToClipboard=()=>{\r\n    dispatch({type: \"COPY_TO_CLIPBOARD\"});\r\n  };\r\n\r\n  const handleHowTo = ()=>{\r\n    console.log('handleHowTo invoked');\r\n    dispatch({type: \"HOW_TO\"});\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Salesforce Package.xml Generator\r\n          </Typography>\r\n          <Button color=\"inherit\" \r\n            onClick={updatePackageXML}\r\n            variant=\"outlined\" \r\n            className={classes.button}\r\n            startIcon={<DescriptionIcon/>}>\r\n            Update Package.xml\r\n          </Button>\r\n          <Button color=\"inherit\" \r\n            onClick={copyToClipboard}\r\n            variant=\"outlined\"\r\n            className={classes.button}\r\n            startIcon={<FileCopyIcon/>}>\r\n            Copy To Clipboard\r\n          </Button>\r\n          <Button color=\"inherit\" \r\n            onClick={handleHowTo}\r\n            variant=\"outlined\"\r\n            className={classes.button}\r\n            startIcon={<HelpOutlineIcon/>}>\r\n            How To\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React,{useState,useContext} from 'react';\r\nimport { GlobalContext } from \"../App\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  title: {\r\n    fontSize: 10,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  }\r\n});\r\n\r\nexport default function MetadataType() {\r\n  const classes = useStyles();\r\n  const { globalState, dispatch }= useContext(GlobalContext);\r\n  const [filterKey,setFilterKey] = useState(\"\");\r\n  \r\n  const handleCheckboxChange = (evt,metadataType)=>{\r\n    evt.stopPropagation();\r\n    console.log('handleCheckboxChange invoked MetadataType.js');\r\n    const isChecked=evt.target.checked;\r\n    metadataType.isSelected=isChecked;\r\n    metadataType.isIndeterminate=false;//reset indeterminate state\r\n    console.log(metadataType);\r\n    dispatch({type: \"MDATA_TYPE_CHECKBOX_STATE_CHANGE\" , payload : metadataType});\r\n    window.scrollTo(0, 0);\r\n    \r\n  };\r\n\r\n const handleMetadataClick = (evt,metadataType)=>{\r\n    evt.stopPropagation();\r\n    console.log('handleMetadataClick invoked MetadataType.js');\r\n    console.log(metadataType);\r\n    dispatch({type: \"MDATA_TYPE_CLICK\" , payload : metadataType});\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  const handleSelectAll =()=>{\r\n    console.log(\"handleSelectAll MetadataType.js\");\r\n    let parNodeArr=[];\r\n    let skippedMetadataTypes=[];   \r\n\r\n    const metadataTypes=globalState.metadataTypes.map(metadataType => {\r\n      \r\n    if(!metadataType.inFolder && !metadataType.isChildXMLName){\r\n      parNodeArr.push(metadataType.id);\r\n      metadataType.isSelected=true;\r\n      metadataType.isIndeterminate=false;//reset indeterminate state\r\n    }else{\r\n      skippedMetadataTypes.push(metadataType.id);\r\n    }\r\n\r\n      return metadataType;\r\n    });\r\n      //Added for #18 - starts\r\n    if(skippedMetadataTypes && skippedMetadataTypes.length>0){\r\n      console.log(\"skippedMetadataTypes\");\r\n      console.log(skippedMetadataTypes);\r\n      skippedMetadataTypes.sort();\r\n      //alert(\"The following Metadata Types will be skipped \"+skippedMetadataTypes.join());\r\n    }\r\n    //Added for #18 - ends\r\n    parNodeArr.sort();\r\n\r\n    dispatch({type: \"MDATA_TYPE_SELECT_ALL\" , payload : {metadataTypes,parNodeArr,skippedMetadataTypes}});\r\n  };\r\n\r\n  const handleClearAll=()=>{\r\n    console.log(\"handleClearAll MetadataType.js\");\r\n    dispatch({type: \"MDATA_TYPE_CLEAR_ALL\" });\r\n  };\r\n\r\n  const handleFilterKeyChange=(event)=>{\r\n    let fKey=event.target.value;\r\n    fKey=fKey?fKey:'';\r\n    setFilterKey(fKey);\r\n  }\r\n\r\n  return (\r\n    <Card className={classes.root} variant=\"outlined\">\r\n\t\t<CardHeader\r\n      titleTypographyProps={{variant:'h6' }}\r\n\t\t\ttitle=\"Metadata Types\"\r\n      action={\r\n        <React.Fragment>\r\n        <Button color=\"secondary\" onClick={handleSelectAll}><strong>Select All</strong></Button>\r\n        <Button onClick={handleClearAll}>Clear All</Button>\r\n        </React.Fragment>\r\n      }\r\n      \r\n      />\r\n      <CardContent>\r\n        <TextField\r\n        id=\"input-with-icon-textfield\"\r\n        variant=\"outlined\"\r\n        placeholder=\"Filter Metadata Types..\"\r\n        value={filterKey}\r\n        onChange={handleFilterKeyChange}\r\n        size=\"small\"\r\n        InputProps={{\r\n        startAdornment: (\r\n          <InputAdornment position=\"start\">\r\n          <SearchIcon />\r\n          </InputAdornment>\r\n        ),\r\n        }}\r\n        fullWidth\r\n        />\r\n        <List dense component=\"nav\" aria-label=\"Metadata Types\">\r\n        {globalState.metadataTypes.map(metadataType =>{\r\n\r\n          if(metadataType.id.toUpperCase().includes(filterKey.toUpperCase())){\r\n            return(\r\n              <ListItem button key={metadataType.id} onClick={evt=>handleMetadataClick(evt,metadataType)}\r\n              selected={metadataType.id===globalState.selectedMetadataType.id}\r\n              title='Click to view available Metadata Components'>\r\n              <ListItemIcon>\r\n                    <Checkbox\r\n                      edge=\"start\"\r\n                      tabIndex={-1}\r\n                      disableRipple\r\n                      inputProps={{ 'aria-labelledby': 'labelId' }}\r\n                      checked={metadataType.isSelected}\r\n                      indeterminate={metadataType.isIndeterminate}\r\n                      onClick={evt=>handleCheckboxChange(evt,metadataType)}\r\n                      \r\n                    />\r\n              </ListItemIcon>\r\n              <ListItemText primary={metadataType.id}/>\r\n              <ListItemSecondaryAction>\r\n                  <IconButton edge=\"end\" aria-label=\"comments\" \r\n                    onClick={evt=>handleMetadataClick(evt,metadataType)}>\r\n                    <NavigateNextIcon />\r\n                  </IconButton>\r\n              </ListItemSecondaryAction>\r\n            </ListItem>  \r\n          );\r\n          }else{\r\n            return <></>;\r\n          }\r\n          \r\n        })\r\n      } \r\n        \r\n      </List>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React,{useState,useContext} from 'react';\r\nimport { GlobalContext } from \"../App\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  title: {\r\n    fontSize: 10,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  }\r\n});\r\n\r\nexport default function ComponentList({selectedMetadataType,isShowChildren}) {\r\n  const classes = useStyles();\r\n  const { dispatch }= useContext(GlobalContext);\r\n  const [filterKey,setFilterKey] = useState(\"\");\r\n\r\n  const handleComponentClick = (component,evt)=>{\r\n    console.log(\"handleComponentClick invoked ComponentList.js\");\r\n    const isChecked=evt.target.checked;\r\n    const compId=component.id;\r\n    selectedMetadataType.children=selectedMetadataType.children.map(child=>{\r\n      if(compId===child.id){\r\n        child.isSelected=isChecked;//update the child state\r\n      }\r\n      return child;\r\n    });\r\n\r\n    selectedMetadataType=updateMetadataType(selectedMetadataType);\r\n    dispatch({type: \"COMPONENT_CHECKBOX_STATE_CHANGE\" , payload : selectedMetadataType});\r\n    \r\n  };\r\n\r\n  const updateMetadataType = (selectedMetadataType)=>{\r\n    console.log(\"updateMetadataType invoked ComponentList.js\");\r\n\r\n    const selectedChildrenArr=selectedMetadataType.children.filter(child=>child.isSelected);\r\n    if(selectedChildrenArr.length===0){\r\n      //None of the children is selected\r\n      selectedMetadataType.isSelected=false;\r\n      selectedMetadataType.isIndeterminate=false;\r\n    }else if(selectedChildrenArr.length===selectedMetadataType.children.length){\r\n      //ALl the children are selected\r\n      selectedMetadataType.isSelected=true;\r\n      selectedMetadataType.isIndeterminate=false;\r\n    }else{\r\n      //Some the children are selected\r\n      selectedMetadataType.isSelected=false;\r\n      selectedMetadataType.isIndeterminate=true;\r\n    }\r\n\r\n    return selectedMetadataType;\r\n\r\n  };\r\n\r\n  const handleSelectAll = ()=>{\r\n    selectedMetadataType.children=selectedMetadataType.children.map(child=>{\r\n      child.isSelected=true;//update the child state \r\n      return child;\r\n    });\r\n\r\n    //ALl the children are selected\r\n    selectedMetadataType.isSelected=true;\r\n    selectedMetadataType.isIndeterminate=false;\r\n    dispatch({type: \"COMPONENT_CHECKBOX_STATE_CHANGE\" , payload : selectedMetadataType});\r\n  };\r\n\r\n  const handleClearAll = ()=>{\r\n    selectedMetadataType.children=selectedMetadataType.children.map(child=>{\r\n      child.isSelected=false;//update the child state\r\n      return child;\r\n    });\r\n\r\n    //None of the children are selected\r\n    selectedMetadataType.isSelected=false;\r\n    selectedMetadataType.isIndeterminate=false;\r\n    dispatch({type: \"COMPONENT_CHECKBOX_STATE_CHANGE\" , payload : selectedMetadataType});\r\n  };\r\n\r\n  const handleFilterKeyChange=(event)=>{\r\n    let fKey=event.target.value;\r\n    fKey=fKey?fKey:'';\r\n    setFilterKey(fKey);\r\n  }\r\n\r\n  return (\r\n    <Card className={classes.root} variant=\"outlined\">\r\n\t\t<CardHeader\r\n      titleTypographyProps={{variant:'h6' }}\r\n\t\t\ttitle={selectedMetadataType.text!==''?selectedMetadataType.text:'Available Components'}\r\n      action={\r\n        <React.Fragment>\r\n        <Button onClick={handleSelectAll}>Select All</Button>\r\n        <Button onClick={handleClearAll}>Clear All</Button>\r\n        </React.Fragment>\r\n      }\r\n      \r\n      />\r\n      <CardContent>\r\n      <TextField\r\n      id=\"input-with-icon-textfield\"\r\n      variant=\"outlined\"\r\n      placeholder={selectedMetadataType.text!==''?'Filter '+selectedMetadataType.text+'..':'Filter Components..'}\r\n      value={filterKey}\r\n      onChange={handleFilterKeyChange}\r\n      size=\"small\"\r\n      InputProps={{\r\n      startAdornment: (\r\n        <InputAdornment position=\"start\">\r\n        <SearchIcon />\r\n        </InputAdornment>\r\n      ),\r\n      }}\r\n      fullWidth\r\n      />\r\n\r\n      <FormGroup>\r\n        {\r\n            selectedMetadataType.children.map(child=>{\r\n             \r\n              if(child.text.toUpperCase().includes(filterKey.toUpperCase())){\r\n             \r\n                return (\r\n                  <FormControlLabel\r\n                    control={<Checkbox value={child.id} checked={child.isSelected}\r\n                    onClick={evt=>handleComponentClick(child,evt)}/>}\r\n                    label={child.text}/>\r\n                )\r\n\r\n              }else{\r\n                return <></>;\r\n              }\r\n\r\n            })\r\n\r\n        }\r\n        \r\n      </FormGroup>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\n","export const reducer = (state, action) => {\r\n\tswitch (action.type) {\r\n\t  \tcase \"INIT_LOAD_REQUEST\":\r\n\t\t\treturn processInitialRequest(state);\r\n\t\r\n\t\tcase \"INIT_LOAD_RESPONSE\":\r\n\t\t\treturn processInitialResponse(state, action);\r\n\r\n        case \"MDATA_TYPE_CHECKBOX_STATE_CHANGE\":\r\n            return processMetadataTypeCheckBox(state,action);\r\n        \r\n        case \"MDATA_TYPE_CLICK\":\r\n            return processMetadataTypeClick(state,action);\r\n\r\n        case \"FETCH_CHILDREN_RESPONSE\":\r\n            return processFetchChildrenResponse(state,action);\r\n\r\n        case \"COMPONENT_CHECKBOX_STATE_CHANGE\":\r\n            return processComponentCheckBox(state,action);\r\n\r\n        case \"MDATA_TYPE_SELECT_ALL\":\r\n            return processMetadataSelectAll(state,action);\r\n\r\n        case \"MDATA_TYPE_CLEAR_ALL\":\r\n            return processMetadataClearAll(state,action);\r\n\r\n        case \"UPDATE_PACKAGE_XML\":\r\n            return processUpdatePackageXml(state,action);\r\n        \r\n        case \"COPY_TO_CLIPBOARD\":\r\n            return processCopyToClipboard(state,action);\r\n        \r\n        case \"HOW_TO\":\r\n            return processHowTo(state,action);\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n  };\r\n  \r\n const processInitialRequest= (state)=>{\r\n\tstate.vscode.postMessage({\r\n        command: 'INIT_LOAD_REQUEST'\r\n\t  });\r\n\treturn state;\r\n }; \r\n\r\n const processInitialResponse = (state, action)=>{\r\n    console.log('processInitialResponse invoked');\r\n    let metadataTypes=[]; \r\n\tconst payload=action.payload;\r\n\tlet metadataObjects=payload.metadataObjects;\r\n\tconst mpExistingPackageXML=payload.mpExistingPackageXML;\r\n    metadataObjects=processChildXMLNames(metadataObjects);\r\n    \r\n    metadataObjects.sort((obj1,obj2)=>{\r\n        if (obj1.xmlName > obj2.xmlName) return 1; // if the first value is greater than the second\r\n        if (obj1.xmlName === obj2.xmlName) return 0; // if values are equal\r\n        if (obj1.xmlName < obj2.xmlName) return -1; // if the first value is less than the second\r\n        \r\n    });\r\n\r\n    metadataObjects.forEach(metadataObj =>{\r\n        let xmlName=metadataObj.xmlName;\r\n        let isChildXMLName=(metadataObj.isChildXMLName)?metadataObj.isChildXMLName:false;//Added for #18\r\n\r\n        if(mpExistingPackageXML[xmlName]){\r\n            //metadata already selected in existing package.xml\r\n            let members=mpExistingPackageXML[xmlName];\r\n            let childArr=[];\r\n            let isWildChar=false;\r\n            let parNode={};\r\n            for(let c=0;c<members.length;c++){\r\n                let childName=members[c];\r\n                \r\n                if(childName==='*'){\r\n                    isWildChar=true;\r\n                    //childArr.push({\"id\" : xmlName+'.'+\"loading\", \"text\" : LOADING, isSelected:false});\r\n                    continue;//change to break\r\n                }\r\n\r\n                let child={\r\n                    \"id\" : xmlName+'.'+childName,\r\n                    \"text\" : childName,\r\n                    isSelected  : true  // is the node selected\r\n                };\r\n\r\n                childArr.push(child);\r\n            }\r\n                //Modified for #18\r\n                parNode={\r\n                    \"id\" : xmlName,\r\n                    \"text\" : xmlName, \r\n                    children : childArr,\r\n                    inFolder : metadataObj.inFolder ,\r\n                    isChildXMLName:isChildXMLName,\r\n                    isRefreshedFromServer : false,\r\n                    isParent  : true, \r\n                    isSelected  : isWildChar,// is the parent node selected\r\n                    isIndeterminate : !isWildChar\r\n                }  \r\n\r\n                metadataTypes.push(parNode);\r\n        }else{\r\n             //Modified for #18\r\n             metadataTypes.push({ \r\n                \"id\" : xmlName,\r\n                \"text\" : xmlName,\r\n                isRefreshedFromServer : false,\r\n                isChildXMLName:isChildXMLName,\r\n                children : [],\r\n                inFolder : metadataObj.inFolder,\r\n                isParent  : true,\r\n                isSelected  : false,// is the parent node selected\r\n                isIndeterminate : false\r\n             }\r\n            );\r\n        }\r\n    });\r\n\r\n    console.log(metadataTypes);\r\n    return {...state, metadataTypes};\r\n\r\n };\r\n\r\n const processChildXMLNames= (metadataObjects)=>{\r\n    let combinedArr=[];\r\n    for(let i=0;i<metadataObjects.length;i++){\r\n        combinedArr.push(metadataObjects[i]);\r\n\r\n        if(metadataObjects[i].childXmlNames){\r\n            metadataObjects[i].childXmlNames.forEach(childXmlName => {\r\n                let childObj={};\r\n                childObj.xmlName=childXmlName;\r\n                childObj.inFolder=false;\r\n                childObj.isChildXMLName=true;\r\n                combinedArr.push(childObj);\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    return combinedArr;\r\n};\r\n\r\nconst processMetadataTypeCheckBox= (state,action)=>{\r\n    console.log('processMetadataTypeCheckBox invoked');\r\n    const metadataType=action.payload;\r\n    console.log(metadataType);\r\n    const vscode=state.vscode;\r\n    state=updateMetadataType(state,metadataType);\r\n    const selectedMetadataType=metadataType;\r\n    //update checked state for all its children\r\n    let updatedChildren=metadataType.children.map(child=>{\r\n        child.isSelected=metadataType.isSelected;\r\n        return child;\r\n    });\r\n    metadataType.children=updatedChildren;\r\n\r\n    if(!metadataType.isRefreshedFromServer){\r\n        vscode.postMessage({\r\n            command: 'FETCH_CHILDREN_REQUEST',\r\n            metadataType : metadataType\r\n          });\r\n    }\r\n\r\n    state.selectedMetadataType=selectedMetadataType;\r\n\r\n    return {...state};\r\n};\r\n\r\nconst processMetadataTypeClick= (state,action)=>{\r\n    console.log('processMetadataTypeClick invoked');\r\n    const metadataType=action.payload;\r\n    console.log(metadataType);\r\n    const vscode=state.vscode;\r\n    state=updateMetadataType(state,metadataType);\r\n    const selectedMetadataType=metadataType;\r\n    \r\n    if(!metadataType.isRefreshedFromServer){\r\n        vscode.postMessage({\r\n            command: 'FETCH_CHILDREN_REQUEST',\r\n            metadataType : metadataType\r\n          });\r\n    }\r\n\r\n    state.selectedMetadataType=selectedMetadataType;\r\n\r\n    return {...state};\r\n};\r\n\r\nconst updateMetadataType = (state,metadataType)=>{\r\n    const metadataTypes=state.metadataTypes;\r\n    const newMetadataTypes=metadataTypes.map(mTypeItr=>{\r\n        if(metadataType.id===mTypeItr.id){\r\n            return metadataType;\r\n        }\r\n\r\n        return mTypeItr;\r\n    });\r\n    state.metadataTypes=newMetadataTypes;\r\n    return state;\r\n};\r\n\r\nconst processFetchChildrenResponse=(state,action)=>{\r\n    console.log(\"processFetchChildrenResponse invoked\");\r\n    let message=action.payload;\r\n    let results=message.results;\r\n    let metadataTypeId=message.metadataType;\r\n\r\n    let childrenArr=[];\r\n    //let mpChildren=new Map();\r\n            \r\n    if(!results || results.length===0){\r\n        console.log('No children');\r\n        childrenArr=[];\r\n        \r\n    }else if( !Array.isArray(results)){\r\n        console.log(\"listmetadata results.fullName \"+results.fullName);\r\n        childrenArr.push({ \"id\" : metadataTypeId+'.'+results.fullName, \"text\" : results.fullName})\r\n        //mpChildren.set(metadataTypeId+'.'+results.fullName,results.fullName);\r\n    }else{\r\n        for(let i=0;i<results.length;i++){\r\n            let node=results[i];\r\n            console.log(\"listmetadata node.fullName \"+node.fullName);\r\n            childrenArr.push({ \"id\" : metadataTypeId+'.'+node.fullName, \"text\" : node.fullName});\r\n            //mpChildren.set(metadataTypeId+'.'+node.fullName,node.fullName);\r\n            \r\n        }\r\n    }\r\n\r\n    childrenArr.sort((obj1,obj2)=>{\r\n        if (obj1.text > obj2.text) return 1; // if the first value is greater than the second\r\n        if (obj1.text === obj2.text) return 0; // if values are equal\r\n        if (obj1.text < obj2.text) return -1; // if the first value is less than the second\r\n    });\r\n\r\n    const newMetadataTypes=state.metadataTypes.map(mTypeItr=>{\r\n        if(metadataTypeId===mTypeItr.id){\r\n            let isParMetadataSelected=mTypeItr.isSelected;\r\n            mTypeItr.isRefreshedFromServer=true;//Server fetch done\r\n            let oldChildArr = mTypeItr.children;//old children\r\n            let selChildCount=0;\r\n            mTypeItr.children=childrenArr.map(child=>{\r\n                //update the children\r\n                if(isParMetadataSelected){\r\n                    //if parent is selected, child is automatically selected\r\n                    child.isSelected=true;\r\n                }else{\r\n                    //if old child is selected, new child is also selected\r\n                    let oldChild = oldChildArr.find(item=>{\r\n                        return item.id===child.id;\r\n                    });\r\n    \r\n                    if(oldChild){\r\n                        //transfer all the existing properties to new child\r\n                        child.isSelected= oldChild.isSelected;\r\n                        if(child.isSelected){\r\n                            selChildCount++;\r\n                        }\r\n                    }else{\r\n                        //old child doesnot exist, unselected by default\r\n                        child.isSelected=false;\r\n                    }\r\n                }\r\n                \r\n                return child;\r\n\r\n            });\r\n            \r\n            if(childrenArr.length!==0 && selChildCount===childrenArr.length){\r\n                mTypeItr.isSelected=true;\r\n                mTypeItr.isIndeterminate=false;\r\n            }\r\n\r\n            state.selectedMetadataType=mTypeItr;//update selectedMetadataType\r\n        }\r\n        \r\n        return mTypeItr;\r\n    });\r\n\r\n    state.metadataTypes=newMetadataTypes;\r\n    console.log(newMetadataTypes);\r\n    return {...state};\r\n\r\n};\r\n\r\nconst processComponentCheckBox=(state,action)=>{\r\n    console.log(\"processComponentCheckBox invoked\");\r\n    const selectedMetadataType=action.payload;\r\n    console.log(selectedMetadataType);\r\n    state.selectedMetadataType=selectedMetadataType;\r\n    return {...state};\r\n};\r\n\r\nconst processMetadataSelectAll=(state,action)=>{\r\n    console.log('processMetadataSelectAll invoked');\r\n    const payload=action.payload;\r\n    const vscode=state.vscode;\r\n    state.metadataTypes=payload.metadataTypes;\r\n    vscode.postMessage({\r\n        command: 'selectAll',\r\n        selectedMetadata : payload.parNodeArr,\r\n        skippedMetadataTypes : payload.skippedMetadataTypes//Added for #18\r\n    });\r\n    console.log(state.metadataTypes);\r\n    return {...state};\r\n\r\n};\r\n\r\nconst processMetadataClearAll=(state,action)=>{\r\n    console.log('processMetadataClearAll invoked');\r\n    //reset selectedMetadataType \r\n    state.selectedMetadataType={id:'',children:[]};\r\n\r\n    //reset metadataTypes & its children\r\n    state.metadataTypes=state.metadataTypes.map(metadataType=>{\r\n        metadataType.isRefreshedFromServer= false;\r\n        metadataType.children = [];\r\n        metadataType.isSelected = false;\r\n        metadataType.isIndeterminate=false;\r\n        return metadataType;\r\n    });\r\n\r\n    console.log(state.metadataTypes);\r\n    return {...state};\r\n};\r\n\r\nconst processUpdatePackageXml=(state,action)=>{\r\n    const vscode=state.vscode;\r\n    vscode.postMessage({\r\n        command: 'UPDATE_PACKAGE_XML',\r\n        metadataTypes : state.metadataTypes\r\n    });\r\n\r\n    return state;\r\n};\r\n\r\nconst processCopyToClipboard=(state,action)=>{\r\n    const vscode=state.vscode;\r\n    vscode.postMessage({\r\n        command: 'COPY_TO_CLIPBOARD',\r\n        metadataTypes : state.metadataTypes\r\n    });\r\n\r\n    return state;\r\n};\r\n\r\nconst processHowTo=(state,action)=>{\r\n    const vscode=state.vscode;\r\n    vscode.postMessage({\r\n        command: 'OPEN_URL',\r\n        url : 'http://www.google.com'\r\n    });\r\n\r\n    return state;\r\n};","import React, { createContext, useReducer, useEffect } from 'react';\nimport { vscode } from \"./index\";\nimport './App.css';\nimport AppHeader from \"./components/AppHeader\";\nimport MetadataType from \"./components/MetadataType\";\nimport ComponentList from \"./components/ComponentList\";\nimport { createMuiTheme, makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport {reducer} from \"./context/reducer\";\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  }\n}));\n\nexport const GlobalContext = createContext();\n\n\nfunction App() {\n  const classes = useStyles();\n  const [globalState, dispatch] = useReducer(reducer, {'vscode' : vscode, metadataTypes : [], selectedMetadataType : {id:'',text:'',children:[]}, isShowChildren : false});\n  console.log(vscode);\n\n  const element = document.querySelector(\"body\");\n\n  const prefersDarkMode = element.classList.contains(\"vscode-dark\");\n  //const prefersDarkMode = useMediaQuery('(body.vscode-dark)');\n\n  const preferredTheme = createMuiTheme({\n    palette: {\n      // Switching the dark mode on is a single property value change.\n      type: prefersDarkMode ? 'dark' : 'light',\n    },\n  });\n\n  useEffect(()=>{\n    console.log('Inside INIT_LOAD_REQUEST useEffect() App.js');\n    dispatch({ type: \"INIT_LOAD_REQUEST\" });\n  },[globalState.vscode]);\n\n  \nuseEffect(()=>{\n  console.log('Inside messageEventListener useEffect() App.js');\n    const messageEventListener= (event) => {\n      const message = event.data; // The json data that the extension sent\n      console.log(event.data);\n      switch (message.command) {\n          case 'metadataObjects':\n              let metadataObjects=message.metadataObjects;\n              console.log(\"Inside App.js metadataObjects event listener \"+metadataObjects.length);\n              dispatch({ type: \"INIT_LOAD_RESPONSE\" , payload : message});\n              break;\n          \n          case 'listmetadata':\n            console.log(\"Inside App.js listmetadata event listener\");\n            dispatch({ type: \"FETCH_CHILDREN_RESPONSE\" , payload : message});\n            break;\n\n          default:\n            break;\n          \n      }\n    }\n\n    window.addEventListener('message', messageEventListener);\n    return ()=>{\n      window.removeEventListener('message', messageEventListener);\n    };\n},[globalState.vscode]);\n\n  return (\n    <ThemeProvider theme={preferredTheme}>\n    <GlobalContext.Provider value={{ globalState, dispatch }}>\n      <div className={classes.root}>\n        <Grid container spacing={1}>\n          <Grid item xs={12}>\n            <Paper><AppHeader/></Paper>\n          </Grid>\n          <Grid item xs={6}>\n            <Paper><MetadataType/></Paper>\n          </Grid>\n          <Grid item xs={6}>\n            <Paper>\n             {globalState.selectedMetadataType.id!=='' &&\n              <ComponentList selectedMetadataType={globalState.selectedMetadataType} isShowChildren={globalState.isShowChildren}/>\n              }\n            </Paper>\n          </Grid>\n          </Grid>\n          </div>\n    </GlobalContext.Provider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nexport const vscode = window.acquireVsCodeApi();//Only one instance per app.\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}